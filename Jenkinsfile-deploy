pipeline {
    agent any
    
    environment {
        REPO_URL = 'git@github.com:reachvigneshmohan/tracker.git'  // Repository with Docker Compose file
        DEPLOY_USER = 'ubuntu'                        // SSH username for the target VM
        DEPLOY_HOST = '51.20.121.116'                  // IP address of the target VM
        COMPOSE_FILE_PATH = 'docker-compose.yml'     // Relative path to the Docker Compose file in the repo
        AWS_REGION = 'eu-north-1'                     // AWS region for ECR
        ECR_REPO_URL = '857264224373.dkr.ecr.eu-north-1.amazonaws.com'  // AWS ECR URL
    }

    stages {
        stage('Checkout Git repository') {
            steps {
                git branch: "${env.BRANCH_NAME}", credentialsId: '2159dd14-bf38-4ba6-8766-f73495d80fac', url: 'https://github.com/reachvigneshmohan/tracker.git'
            }
        }

        stage('Deploy to VM') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'deploymentkey', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                        // Copy the Docker Compose file to the target VM using SCP
                        sh """
                        scp -o StrictHostKeyChecking=no ${WORKSPACE}/${COMPOSE_FILE_PATH} ${DEPLOY_USER}@${DEPLOY_HOST}:/home/${DEPLOY_USER}/docker-compose.yml
                        """

                        // SSH into the VM, login to ECR and deploy using Docker Compose
                        sh """
                        ssh -o StrictHostKeyChecking=no ${DEPLOY_USER}@${DEPLOY_HOST} '
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO_URL} &&
                            docker stack deploy -c /home/${DEPLOY_USER}/docker-compose.yml --with-registry-auth my-tracer-stack
                        '
                        """
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()  // Clean up workspace after the pipeline finishes
        }
    }
}
